bindkey -e
HISTFILE=$HOME/.zsh-history           # 履歴をファイルに保存する
HISTSIZE=100000                       # メモリ内の履歴の数
SAVEHIST=100000                       # 保存される履歴の数
setopt extended_history               # 履歴ファイルに時刻を記録
function history-all { history -E 1 } # 全履歴の一覧を出力する
setopt share_history                  # 履歴の共有

setopt PROMPT_SUBST #色つけ設定
#RPROMPT="[%d]"   #右プロンプト設定
PROMPT="%n@%m%% "   #プロンプト設定

# 各種PATHを最初に追加
## (以降のPATH通ってる前提のスクリプト等を通すため)
typeset -gU path PATH
path=(
  ## M1 brew
  /opt/homebrew/bin(N-/)
  /opt/homebrew/sbin(N-/)
  ## x64 brew
  /usr/local/bin(N-/)
  /usr/local/sbin(N-/)
  ## .bin(DOT_LINK_TARGET/bin)をPATHに追加
  $HOME/.bin(N-/)
  ## Android platform-tools
  ### Android Studioのパスがあればそれを使用する
  $HOME/Library/Android/sdk/platform-tools(N-/)
  # mysql5.6
  /usr/local/opt/mysql@5.6/bin(N-/)

  $path
)

###ここからhttp://qiita.com/uasi/items/c4288dd835a65eb9d709より引用
# 自動補完を有効にする
# コマンドの引数やパス名を途中まで入力して <Tab> を押すといい感じに補完してくれる
# 例： `cd path/to/<Tab>`, `ls -<Tab>`
autoload -U compinit; compinit
# 入力したコマンドが存在せず、かつディレクトリ名と一致するなら、ディレクトリに cd する
# 例： /usr/bin と入力すると /usr/bin ディレクトリに移動
setopt auto_cd

# cd した先のディレクトリをディレクトリスタックに追加する
# ディレクトリスタックとは今までに行ったディレクトリの履歴のこと
# `cd +<Tab>` でディレクトリの履歴が表示され、そこに移動できる
setopt auto_pushd

# pushd したとき、ディレクトリがすでにスタックに含まれていればスタックに追加しない
setopt pushd_ignore_dups

# 拡張 glob を有効にする
# glob とはパス名にマッチするワイルドカードパターンのこと
# （たとえば `mv hoge.* ~/dir` における "*"）
# 拡張 glob を有効にすると # ~ ^ もパターンとして扱われる
# どういう意味を持つかは `man zshexpn` の FILENAME GENERATION を参照
setopt extended_glob

# 入力したコマンドがすでにコマンド履歴に含まれる場合、履歴から古いほうのコマンドを削除する
# コマンド履歴とは今まで入力したコマンドの一覧のことで、上下キーでたどれる
setopt hist_ignore_all_dups

# コマンドがスペースで始まる場合、コマンド履歴に追加しない
# 例： <Space>echo hello と入力
setopt hist_ignore_space

# <Tab> でパス名の補完候補を表示したあと、
# 続けて <Tab> を押すと候補からパス名を選択できるようになる
# 候補を選ぶには <Tab> か Ctrl-N,B,F,P
zstyle ':completion:*:default' menu select=1

# 単語の一部として扱われる文字のセットを指定する
# ここではデフォルトのセットから / を抜いたものとする
# こうすると、 Ctrl-W でカーソル前の1単語を削除したとき、 / までで削除が止まる
WORDCHARS='*?_-.[]~=&;!#$%^(){}<>'


#gitブランチ情報の表示設定
##http://yoshiko.hatenablog.jp/entry/2014/04/02/zsh%E3%81%AE%E3%83%97%E3%83%AD%E3%83%B3%E3%83%97%E3%83%88%E3%81%ABgit%E3%81%AE%E3%82%B9%E3%83%86%E3%83%BC%E3%82%BF%E3%82%B9%E3%82%92%E3%82%B7%E3%83%B3%E3%83%97%E3%83%AB%E5%8F%AF%E6%84%9B%E3%81%8F
##http://kitak.hatenablog.jp/entry/2013/05/25/103059

# VCSの情報を取得するzshの便利関数 vcs_infoを使う
autoload -Uz vcs_info

# 表示フォーマットの指定
# %b ブランチ情報
# %a アクション名(mergeなど)
zstyle ':vcs_info:*' formats '[%b]'
zstyle ':vcs_info:*' actionformats '[%b|%a]'
precmd () {
    psvar=()
    LANG=en_US.UTF-8 vcs_info
    [[ -n "$vcs_info_msg_0_" ]] && psvar[1]="$vcs_info_msg_0_"
}

# バージョン管理されているディレクトリにいれば表示，そうでなければ非表示
RPROMPT="%1(v|%F{green}%1v%f|)[%d]"

# direnv
eval "$(direnv hook zsh)"

export EDITOR="nano"

## ログイン時にtmux自動アタッチする関数
### zshrc_*_privateで呼び出すことを想定
function tmux_auto_attach () {
  ## https://qiita.com/ssh0/items/a9956a74bff8254a606a
  ### $PERCOL=/usr/local/bin/peco

  # https://qiita.com/abcang/items/e427d9e4ff8d8e5f0c31
  if [[ -n "${REMOTEHOST}${SSH_CONNECTION}" && -z "$TMUX" && -z "$STY" ]]; then
    function confirm {
      MSG=$1
        while :
        do
          echo -n "${MSG} [Y/n]: "
          read ans
          if [ -z "$ans" ]; then
            ans="y"
          fi
          case $ans in
            [yY]) return 0 ;;
            [nN]) return 1 ;;
          esac
        done
    }

    option=""
    if tmux has-session && tmux list-sessions; then
        echo "tmux attached session "
        option="attach"
    else
        echo "tmux created new session"
    fi
    tmux $option && confirm "exit?" && exit
  fi
}

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc' ]; then . '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc' ]; then . '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc'; fi

# 有効なfuzzy finderを自動選択
## https://qiita.com/b4b4r07/items/9e1bbffb1be70b6ce033
AVAILABLE_FUZZY_FINDER_LIST="fzf:/usr/local/bin/fzf:peco:/usr/local/bin/peco"
available-fuzzy-finder-find () {
    local x candidates
    candidates="$1:"
    while [ -n "$candidates" ]
    do
        x=${candidates%%:*}
        candidates=${candidates#*:}
        if type "$x" >/dev/null 2>&1; then
            echo "$x"
            return 0
        else
            continue
        fi
    done
    return 1
}

export AVAILABLE_FUZZY_FINDER=`available-fuzzy-finder-find $AVAILABLE_FUZZY_FINDER_LIST`

# tmux使用時にホスト名から色指定
## https://memo.sugyan.com/entry/20120306/1331009647
if [ "$TMUX" != "" ]; then
    tmux set-option status-bg colour$(($(echo -n $(whoami)@$(hostname) | sum | cut -f1 -d' ') % 8 + 8)) | cat > /dev/null
fi
